diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..55fb900fcc53ffc2fd544506b05590fbaf95c544
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,4 @@
+__pycache__/
+venv/
+app.db
+uploads/
diff --git a/README.md b/README.md
new file mode 100644
index 0000000000000000000000000000000000000000..c8bd283805e75526f97fc0ba731d88d381ccb824
--- /dev/null
+++ b/README.md
@@ -0,0 +1,101 @@
+# Health Habit Tracker (Prototype)
+
+This is a minimal Flask application demonstrating how one might upload Apple Health XML data,
+create daily habits, store entries, and explore correlations between them.
+For Mac users, see **README_mac_ru.md** for a simplified guide in Russian.
+
+## Setup
+
+1. Create a virtual environment and install dependencies:
+
+```bash
+python3 -m venv venv
+source venv/bin/activate
+pip install -r requirements.txt
+```
+
+2. Run the application:
+
+```bash
+python app.py
+```
+
+The server listens on `http://localhost:5000`. Opening this URL in a browser
+shows a simple page styled with **Bootstrap**. You can upload an XML file and
+create habits there. When adding a habit you choose how to record it:
+`Yes/No`, a number, a `Low/Medium/High` scale, or a `1..5` scale. Existing
+habits are listed with buttons so you can quickly mark today&#39;s values.
+After uploading a file, the page lists the metrics it detected.
+Uploaded data are aggregated per day and stored in a small SQLite database.
+The `/analytics` page now computes correlations between all stored metrics and
+habit entries. Metric names are shown in a human friendly form for all types
+(e.g. `Apple Stand Time`, `Heart Rate`, or `Sleeping Wrist Temperature`).
+Use the query parameter `accuracy` (`high`, `medium`, or `low`) or the buttons on the analytics page
+to control how strict the correlation threshold is. Trivial relations like
+`Body Fat Percentage` vs `Body Mass` are hidden unless `show_trivial=1` is passed.
+
+## Endpoints
+
+- `POST /upload` – upload an Apple Health XML file (can be called from the web form or via `curl`).
+- `POST /habits` – create a habit. Accepts JSON or form data with `name` and `input_type`.
+- `POST /habit_entries` – add an entry. Accepts JSON or form data with `habit_id`, `entry_date` (YYYY-MM-DD), and `value`.
+- `GET /analytics` – show basic statistics and correlations.
+- `GET /` – renders a simple HTML page with forms.
+
+Uploaded files are stored in the `uploads/` directory, and a simple SQLite database is created as `app.db`.
+
+## Beginner Guide
+
+The steps above assume some familiarity with Python. Below is a more detailed
+walkthrough if you're setting up a Python project for the first time.
+
+1. **Install Python 3** – download it from [python.org](https://www.python.org/)
+   if it isn't already installed. You can check by running `python3 --version`
+   in your terminal.
+2. **Create a virtual environment** – this is a folder that keeps the
+   dependencies for this project separate from the rest of your system. Run:
+
+   ```bash
+   python3 -m venv venv
+   ```
+
+   Then activate it:
+
+   ```bash
+   source venv/bin/activate  # On Windows use "venv\Scripts\activate"
+   ```
+
+   After activation your prompt will show `(venv)` at the beginning.
+3. **Install dependencies** – the packages the app needs are listed in
+   `requirements.txt` (`Flask`, `numpy`, and `pandas`). Install them with:
+
+   ```bash
+   pip install -r requirements.txt
+   ```
+
+4. **Run the server** – start the Flask application with:
+
+   ```bash
+   python app.py
+   ```
+
+   Visit `http://localhost:5000` in your browser. Use tools like `curl` or
+   Postman to send requests to the API endpoints described above.
+5. **Deactivate the environment** – when you're done, simply run `deactivate`
+   to leave the virtual environment.
+
+If you ever remove the `venv/` folder, you can recreate it using the same steps
+above. The SQLite database (`app.db`) and uploaded files (`uploads/`) are stored
+locally in the project directory.
+
+## Creating a diff patch
+
+If you want to generate a Unix-style patch file with the latest staged changes,
+run:
+
+```bash
+./generate_patch.sh
+```
+
+This script saves the diff to `update.patch`. Commit this file along with your
+changes if you wish to share the patch separately.
diff --git a/README_mac_ru.md b/README_mac_ru.md
new file mode 100644
index 0000000000000000000000000000000000000000..44d4f9cc1b191d0131f5ad9402a60374968a18c7
--- /dev/null
+++ b/README_mac_ru.md
@@ -0,0 +1,56 @@
+# Быстрый старт на Mac
+
+Эти шаги помогут запустить прототип приложения на Mac.
+
+1. **Убедитесь, что установлен Python 3**
+   
+   В терминале выполните:
+   ```bash
+   python3 --version
+   ```
+   Если команда не найдена, скачайте Python с сайта [python.org](https://www.python.org/) или установите через Homebrew:
+   ```bash
+   brew install python3
+   ```
+
+2. **Скачайте проект и перейдите в его папку**
+   
+   В терминале выполните:
+   ```bash
+   git clone <адрес репозитория>
+   cd <папка-проекта>
+   ```
+
+3. **Создайте виртуальное окружение и активируйте его**
+   
+   ```bash
+   python3 -m venv venv
+   source venv/bin/activate
+   ```
+   В начале строки появится `(venv)` – это значит, что окружение активно.
+
+4. **Установите зависимости** (Flask, numpy и pandas)
+
+   ```bash
+   pip install -r requirements.txt
+   ```
+
+5. **Запустите приложение**
+   
+   ```bash
+   python app.py
+   ```
+   Сервер будет работать на `http://localhost:5000`.
+  Перейдите по этому адресу через браузер. На главной странице можно загрузить
+  XML и создать привычки. При создании выберите формат значения: `да/нет`,
+  число, шкала `мало/средне/много` или `1..5`. Ниже появится список привычек с
+  кнопками для выбора значения на сегодня. После загрузки файла метрики показываются в
+  удобном виде (например, «Apple Stand Time» или «Sleeping Wrist Temperature»). Откройте `/analytics`, чтобы
+  увидеть корреляции. На странице есть кнопки выбора точности (`high`,
+  `medium`, `low`). Тривиальные связи скрываются по умолчанию, но их можно
+  отобразить, добавив `show_trivial=1` в адрес.
+
+6. **Отключение окружения**
+   
+   После завершения работы просто введите `deactivate`.
+
diff --git a/app.py b/app.py
new file mode 100644
index 0000000000000000000000000000000000000000..1a8916d2485e6c6c2651e8deef6c1f0192ca46d7
--- /dev/null
+++ b/app.py
@@ -0,0 +1,256 @@
+from flask import Flask, request, jsonify, render_template, redirect, url_for
+from werkzeug.utils import secure_filename
+import sqlite3
+import xml.etree.ElementTree as ET
+from collections import defaultdict
+import statistics
+import pandas as pd
+import numpy as np
+import os
+
+app = Flask(__name__)
+app.config['UPLOAD_FOLDER'] = 'uploads'
+
+os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
+DB_PATH = 'app.db'
+
+TRIVIAL_PAIRS = {frozenset({'Body Fat Percentage', 'Body Mass'})}
+
+def prettify_type(raw):
+    """Convert HK type names to a readable form."""
+    if not raw:
+        return raw
+    prefixes = [
+        'HKQuantityTypeIdentifier',
+        'HKCategoryTypeIdentifier',
+        'HKCorrelationTypeIdentifier',
+    ]
+    for p in prefixes:
+        if raw.startswith(p):
+            raw = raw[len(p):]
+            break
+    if raw.startswith('HK'):
+        raw = raw[2:]
+    if raw.endswith('Identifier'):
+        raw = raw[:-10]
+    words = []
+    buf = raw[0]
+    for ch in raw[1:]:
+        if ch.isupper() and buf[-1].islower():
+            words.append(buf)
+            buf = ch
+        else:
+            buf += ch
+    words.append(buf)
+    name = ' '.join(w.capitalize() for w in words)
+    return name
+
+def init_db():
+    conn = sqlite3.connect(DB_PATH)
+    c = conn.cursor()
+    c.execute('''CREATE TABLE IF NOT EXISTS habits (
+                    id INTEGER PRIMARY KEY AUTOINCREMENT,
+                    name TEXT,
+                    input_type TEXT
+                )''')
+    c.execute('''CREATE TABLE IF NOT EXISTS daily_metrics (
+                    id INTEGER PRIMARY KEY AUTOINCREMENT,
+                    metric_type TEXT,
+                    metric_date TEXT,
+                    value REAL
+                )''')
+    c.execute('''CREATE TABLE IF NOT EXISTS habit_entries (
+                    id INTEGER PRIMARY KEY AUTOINCREMENT,
+                    habit_id INTEGER,
+                    entry_date TEXT,
+                    value TEXT,
+                    FOREIGN KEY(habit_id) REFERENCES habits(id)
+                )''')
+    conn.commit()
+    conn.close()
+
+init_db()
+
+@app.route('/habits', methods=['POST'])
+def create_habit():
+    data = request.form if request.form else request.json
+    if not data:
+        return jsonify({'error': 'No data provided'}), 400
+    name = data.get('name')
+    input_type = data.get('input_type')
+    conn = sqlite3.connect(DB_PATH)
+    c = conn.cursor()
+    c.execute('INSERT INTO habits (name, input_type) VALUES (?, ?)', (name, input_type))
+    conn.commit()
+    habit_id = c.lastrowid
+    conn.close()
+    if request.form:
+        return redirect(url_for('index'))
+    return jsonify({'id': habit_id, 'name': name, 'input_type': input_type})
+
+@app.route('/habit_entries', methods=['POST'])
+def add_entry():
+    """Store a single habit entry for the given date."""
+    data = request.form if request.form else request.json
+    if not data:
+        return jsonify({'error': 'No data provided'}), 400
+
+    habit_id = data.get('habit_id')
+    entry_date = data.get('entry_date')
+    value = data.get('value')
+
+    conn = sqlite3.connect(DB_PATH)
+    c = conn.cursor()
+    c.execute(
+        'INSERT INTO habit_entries (habit_id, entry_date, value) '
+        'VALUES (?, ?, ?)',
+        (habit_id, entry_date, value)
+    )
+    conn.commit()
+    conn.close()
+
+    if request.form:
+        return redirect(url_for('index'))
+    return jsonify({'status': 'ok'})
+
+@app.route('/upload', methods=['POST'])
+def upload_xml():
+    if 'file' not in request.files:
+        return 'No file', 400
+    file = request.files['file']
+    filename = secure_filename(file.filename)
+    path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
+    file.save(path)
+    metrics = parse_xml(path)
+    if request.form:
+        # When called from HTML form, show metrics on the index page
+        return render_template('index.html', metrics=list(metrics.keys()))
+    return jsonify({'metrics_found': list(metrics.keys())})
+
+def parse_xml(path):
+    """Parse XML and store daily aggregates in the DB."""
+    daily = defaultdict(lambda: defaultdict(list))
+    for event, elem in ET.iterparse(path, events=('end',)):
+        if elem.tag == 'Record':
+            mtype = prettify_type(elem.attrib.get('type'))
+            value = elem.attrib.get('value')
+            start = elem.attrib.get('startDate', '')[:10]
+            try:
+                num = float(value)
+            except (TypeError, ValueError):
+                elem.clear()
+                continue
+            daily[mtype][start].append(num)
+            elem.clear()
+
+    conn = sqlite3.connect(DB_PATH)
+    c = conn.cursor()
+    metrics_found = set()
+    for mtype, days in daily.items():
+        for date, values in days.items():
+            if mtype == 'Step Count':
+                val = sum(values)
+            else:
+                val = statistics.mean(values)
+            c.execute('INSERT INTO daily_metrics (metric_type, metric_date, value) VALUES (?, ?, ?)',
+                      (mtype, date, val))
+            metrics_found.add(mtype)
+    conn.commit()
+    conn.close()
+    return {m: None for m in metrics_found}
+
+@app.route('/analytics', methods=['GET'])
+def analytics():
+    """Compute correlations between metrics and habits."""
+    accuracy = request.args.get('accuracy', 'medium')
+    thresholds = {'high': 0.6, 'medium': 0.4, 'low': 0.2}
+    min_points = {'high': 30, 'medium': 15, 'low': 5}
+    thresh = thresholds.get(accuracy, 0.4)
+    min_pts = min_points.get(accuracy, 15)
+    show_trivial = request.args.get('show_trivial') == '1'
+
+    conn = sqlite3.connect(DB_PATH)
+    df = pd.read_sql_query('SELECT metric_date, metric_type, value FROM daily_metrics', conn)
+    habits_df = pd.read_sql_query(
+        'SELECT habit_entries.entry_date, habits.name, habits.input_type, habit_entries.value '
+        'FROM habit_entries JOIN habits ON habit_entries.habit_id = habits.id',
+        conn
+    )
+    conn.close()
+
+    if df.empty:
+        return render_template('analytics.html', message='No metrics uploaded yet')
+
+    pivot = df.pivot_table(values='value', index='metric_date', columns='metric_type', aggfunc='first')
+
+    if not habits_df.empty:
+        def conv(row):
+            t = row['input_type']
+            val = row['value']
+            if t == 'boolean':
+                return 1 if str(val).lower() in ('1', 'yes', 'true', 'да') else 0
+            if t == 'scale3':
+                mapping = {'low': 1, 'medium': 2, 'high': 3}
+                return mapping.get(str(val).lower())
+            if t == 'scale5':
+                try:
+                    n = int(val)
+                    if 1 <= n <= 5:
+                        return float(n)
+                except ValueError:
+                    return None
+            try:
+                return float(val)
+            except ValueError:
+                return None
+
+        habits_df['num_val'] = habits_df.apply(conv, axis=1)
+        habit_pivot = habits_df.pivot_table(values='num_val', index='entry_date', columns='name', aggfunc='first')
+        pivot = pivot.join(habit_pivot, how='left')
+
+    correlations = []
+    summaries = []
+    cols = list(pivot.columns)
+    for i in range(len(cols)):
+        for j in range(i + 1, len(cols)):
+            c1, c2 = cols[i], cols[j]
+            sub = pivot[[c1, c2]].dropna()
+            if len(sub) < min_pts:
+                continue
+            corr = sub[c1].corr(sub[c2])
+            if corr is None:
+                continue
+            if frozenset({c1, c2}) in TRIVIAL_PAIRS and not show_trivial:
+                continue
+            if abs(corr) >= thresh and abs(corr) < 0.99:
+                correlations.append((c1, c2, corr))
+                slope, intercept = np.polyfit(sub[c1], sub[c2], 1)
+                mean_x = sub[c1].mean()
+                mean_y = sub[c2].mean()
+                step = sub[c1].std()
+                if step:
+                    predicted = mean_y + slope * step
+                    summaries.append(
+                        f"If your {c1.lower()} rises from {mean_x:.0f} to {mean_x+step:.0f}, "
+                        f"{c2.lower()} may change from {mean_y:.0f} to {predicted:.0f}."
+                    )
+
+    lines = [f"Accuracy: {accuracy}", f"Found {len(correlations)} significant correlations"]
+    for c1, c2, corr in correlations:
+        lines.append(f"{c1} vs {c2}: {corr:+.2f}")
+
+    message = '\n'.join(lines)
+    if request.args.get('json') == '1':
+        return jsonify({'correlations': correlations, 'summaries': summaries})
+    return render_template('analytics.html', message=message, summaries=summaries, accuracy=accuracy)
+
+@app.route('/')
+def index():
+    """Render a simple page with forms for common actions."""
+    conn = sqlite3.connect(DB_PATH)
+    habits = conn.execute('SELECT id, name, input_type FROM habits').fetchall()
+    conn.close()
+    return render_template('index.html', habits=habits)
+
+if __name__ == '__main__':
+    app.run(debug=True)
diff --git a/generate_patch.sh b/generate_patch.sh
new file mode 100755
index 0000000000000000000000000000000000000000..684d9cf2ba11cca4f2ec0d9b17f4ae9ebacb087d
--- /dev/null
+++ b/generate_patch.sh
@@ -0,0 +1,5 @@
+#!/bin/bash
+# Save diff of staged changes to update.patch in unified format
+
+git diff --cached -u > update.patch
+printf 'Patch saved to update.patch\n'
diff --git a/requirements.txt b/requirements.txt
new file mode 100644
index 0000000000000000000000000000000000000000..4b0b79a6602ed1d790412ef8cc1781095d7e4dee
--- /dev/null
+++ b/requirements.txt
@@ -0,0 +1,3 @@
+Flask
+numpy
+pandas
diff --git a/templates/analytics.html b/templates/analytics.html
new file mode 100644
index 0000000000000000000000000000000000000000..0104d5b38f48eb084b7a5d5578c4bf6687f6c143
--- /dev/null
+++ b/templates/analytics.html
@@ -0,0 +1,17 @@
+{% extends 'base.html' %}
+{% block content %}
+<h2 class="mb-3">Analytics</h2>
+<div class="mb-3">
+  <a href="/analytics?accuracy=high" class="btn btn-sm btn-primary">High</a>
+  <a href="/analytics?accuracy=medium" class="btn btn-sm btn-secondary">Medium</a>
+  <a href="/analytics?accuracy=low" class="btn btn-sm btn-secondary">Low</a>
+</div>
+<pre class="bg-light p-3">{{ message }}</pre>
+{% if summaries %}
+<ul class="list-group">
+  {% for s in summaries %}
+  <li class="list-group-item">{{ s }}</li>
+  {% endfor %}
+</ul>
+{% endif %}
+{% endblock %}
diff --git a/templates/base.html b/templates/base.html
new file mode 100644
index 0000000000000000000000000000000000000000..f1b3268f319136d51a4df2c642677f05d4401fdb
--- /dev/null
+++ b/templates/base.html
@@ -0,0 +1,26 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8" />
+    <title>Health Habit Tracker</title>
+    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
+    <style>
+      body { background: #f8f8f8; }
+    </style>
+</head>
+<body>
+<nav class="navbar navbar-expand-lg navbar-dark bg-primary mb-4">
+  <div class="container-fluid">
+    <a class="navbar-brand" href="/">Health Habit Tracker</a>
+    <div class="navbar-nav">
+      <a class="nav-link" href="/">Home</a>
+      <a class="nav-link" href="/analytics">Analytics</a>
+    </div>
+  </div>
+</nav>
+<div class="container">
+{% block content %}{% endblock %}
+</div>
+<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
+</body>
+</html>
diff --git a/templates/index.html b/templates/index.html
new file mode 100644
index 0000000000000000000000000000000000000000..d3c3971edfcb3a54de2bbe99fb25a35bcf8a4d3f
--- /dev/null
+++ b/templates/index.html
@@ -0,0 +1,65 @@
+{% extends 'base.html' %}
+{% block content %}
+<h2 class="mb-3">Upload Apple Health XML</h2>
+<form action="/upload" method="post" enctype="multipart/form-data" class="mb-4 p-3 bg-white rounded shadow-sm">
+  <div class="mb-3">
+    <input type="file" name="file" class="form-control" required>
+  </div>
+  <button type="submit" class="btn btn-primary">Upload</button>
+</form>
+
+<h2 class="mb-3">Create Habit</h2>
+<form action="/habits" method="post" id="habit-form" class="mb-4 p-3 bg-white rounded shadow-sm">
+  <div class="mb-3">
+    <label class="form-label">Name</label>
+    <input type="text" name="name" class="form-control" required>
+  </div>
+  <div class="mb-3">
+    <label class="form-label">Input Type</label>
+    <select name="input_type" class="form-select">
+      <option value="boolean">Yes/No</option>
+      <option value="number">Number</option>
+      <option value="scale3">Low/Medium/High</option>
+      <option value="scale5">1 to 5</option>
+    </select>
+  </div>
+  <button type="submit" class="btn btn-success">Create</button>
+</form>
+
+{% if habits %}
+<h2>Today&#39;s Habits</h2>
+{% set today = ("now"|date("%Y-%m-%d")) %}
+{% for h in habits %}
+  <form action="/habit_entries" method="post" class="mb-2">
+    <input type="hidden" name="habit_id" value="{{ h[0] }}">
+    <input type="hidden" name="entry_date" value="{{ today }}">
+    <strong>{{ h[1] }}</strong>
+    {% if h[2] == 'boolean' %}
+      <button name="value" value="1" class="btn btn-sm btn-outline-primary">Yes</button>
+      <button name="value" value="0" class="btn btn-sm btn-outline-secondary">No</button>
+    {% elif h[2] == 'number' %}
+      <input type="number" name="value" step="any" class="form-control d-inline-block w-auto">
+      <button type="submit" class="btn btn-sm btn-primary">Save</button>
+    {% elif h[2] == 'scale3' %}
+      <button name="value" value="low" class="btn btn-sm btn-outline-secondary">Low</button>
+      <button name="value" value="medium" class="btn btn-sm btn-outline-secondary">Medium</button>
+      <button name="value" value="high" class="btn btn-sm btn-outline-secondary">High</button>
+    {% elif h[2] == 'scale5' %}
+      {% for i in range(1,6) %}
+        <button name="value" value="{{ i }}" class="btn btn-sm btn-outline-secondary">{{ i }}</button>
+      {% endfor %}
+    {% endif %}
+  </form>
+{% endfor %}
+{% endif %}
+
+<p><a href="/analytics">View Analytics</a> (use <code>?accuracy=high|medium|low</code>)</p>
+{% if metrics %}
+<h3>Metrics found in last upload:</h3>
+<ul>
+  {% for m in metrics %}
+  <li>{{ m }}</li>
+  {% endfor %}
+</ul>
+{% endif %}
+{% endblock %}
diff --git a/update.patch b/update.patch
new file mode 100644
index 0000000000000000000000000000000000000000..d6b02fde0b5187700a6f7cbd973fed4851ff6098
--- /dev/null
+++ b/update.patch
@@ -0,0 +1,31 @@
+diff --git a/README.md b/README.md
+index 65258d8..c8bd283 100644
+--- a/README.md
++++ b/README.md
+@@ -87,3 +87,15 @@ walkthrough if you're setting up a Python project for the first time.
+ If you ever remove the `venv/` folder, you can recreate it using the same steps
+ above. The SQLite database (`app.db`) and uploaded files (`uploads/`) are stored
+ locally in the project directory.
++
++## Creating a diff patch
++
++If you want to generate a Unix-style patch file with the latest staged changes,
++run:
++
++```bash
++./generate_patch.sh
++```
++
++This script saves the diff to `update.patch`. Commit this file along with your
++changes if you wish to share the patch separately.
+diff --git a/generate_patch.sh b/generate_patch.sh
+new file mode 100755
+index 0000000..684d9cf
+--- /dev/null
++++ b/generate_patch.sh
+@@ -0,0 +1,5 @@
++#!/bin/bash
++# Save diff of staged changes to update.patch in unified format
++
++git diff --cached -u > update.patch
++printf 'Patch saved to update.patch\n'
